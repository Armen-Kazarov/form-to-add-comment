{"version":3,"sources":["Components/CommentsList/CommentsList.module.css","redux/comments/comments-actions.js","redux/comments/comments-reducers.js","redux/store.js","Components/CommentForm/CommentForm.js","redux/comments/comments-selectors.js","Components/CommentsList/CommentList.js","App.js","index.js","Components/CommentForm/CommentForm.module.css"],"names":["module","exports","addComment","createAction","name","text","payload","id","uuidv4","items","createReducer","commentsActions","state","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","persistConfig","key","storage","store","configureStore","reducer","comments","persistReducer","commentsReducer","devTools","process","persistor","persistStore","CommentForm","useState","setName","setText","dispatch","useDispatch","handleChange","e","target","value","resetForm","className","s","commentForm","onSubmit","preventDefault","htmlFor","type","placeholder","inputName","onChange","required","inputComment","btnAdd","title","getVisibleComments","getComments","CommentList","useSelector","listItems","map","item","App","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"wGACAA,EAAOC,QAAU,CAAC,UAAY,gCAAgC,KAAO,6B,2MCUtD,GAAEC,WAREC,YAAa,gBAAgB,SAACC,EAAMC,GAAP,MAAiB,CAC/DC,QAAS,CACPF,OACAC,OACAE,GAAIC,oBCHFC,EAAQC,YAAc,GAAD,eACxBC,EAAgBT,YAAa,SAACU,EAAD,OAAUN,EAAV,EAAUA,QAAV,4BAA4BM,GAA5B,CAAmCN,QAGpDO,cAAgB,CAC7BJ,UCMIK,EAAU,sBACXC,YAAqB,CACtBC,kBAAmB,CACjBC,eAAgB,CAACC,IAAOC,IAAWC,IAAOC,IAASC,IAAOC,SAHhD,CAMdC,MAGIC,EAAgB,CACpBC,IAAK,OACLC,aAGWC,EAAQC,YAAe,CAClCC,QAAS,CACPC,SAAUC,YAAeP,EAAeQ,IAE1CnB,aACAoB,UAAUC,IAGCC,EAAYC,YAAaT,G,+CChCvB,SAASU,IACtB,MAAwBC,mBAAS,IAAjC,mBAAOnC,EAAP,KAAaoC,EAAb,KACA,EAAwBD,mBAAS,IAAjC,mBAAOlC,EAAP,KAAaoC,EAAb,KACMC,EAAWC,cAEXC,EAAe,SAAAC,GACnB,MAAwBA,EAAEC,OAAlB1C,EAAR,EAAQA,KAAM2C,EAAd,EAAcA,MAEd,OAAQ3C,GACN,IAAK,OACHoC,EAAQO,GACR,MAEF,IAAK,UACHN,EAAQM,GACR,MAEF,QACE,SAUAC,EAAY,WAChBR,EAAQ,IACRC,EAAQ,KAGV,OACE,gCACE,uBAAMQ,UAAWC,IAAEC,YAAaC,SAbf,SAAAP,GAGnB,OAFAA,EAAEQ,iBAEKX,EAAS/B,EAAgBT,WAAWE,EAAMC,GAAO2C,MAUtD,UACE,uBAAOM,QAAQ,WAAf,kBACA,uBACEC,KAAK,OACLnD,KAAK,OACLG,GAAG,WACHiD,YAAY,aACZP,UAAWC,IAAEO,UACbC,SAAUd,EACVG,MAAO3C,EACPuD,UAAQ,IAEV,uBAAOL,QAAQ,cAAf,qBACA,0BACEC,KAAK,OACLnD,KAAK,UACLG,GAAG,cACHiD,YAAY,qBACZP,UAAWC,IAAEU,aACbF,SAAUd,EACVG,MAAO1C,EACPsD,UAAQ,IAEV,wBAAQV,UAAWC,IAAEW,OAAQN,KAAK,SAAlC,4BAIF,oBAAIN,UAAWC,IAAEY,MAAjB,8B,UCjEOC,EAAqB,SAAAnD,GAEhC,OAJyB,SAAAA,GAAK,OAAIA,EAAMmB,SAAStB,MAG7BuD,CAAYpD,I,iBCCnB,SAASqD,IACtB,IAAMlC,EAAWmC,YAAYH,GAE7B,OACE,oBAAId,UAAWC,IAAEiB,UAAjB,SACGpC,EAASqC,KAAI,gBAAG7D,EAAH,EAAGA,GAAIH,EAAP,EAAOA,KAAMC,EAAb,EAAaA,KAAb,OACZ,qBAAa4C,UAAWC,IAAEmB,KAA1B,UACGjE,EADH,KACWC,IADFE,QCNF,SAAS+D,IACtB,OACE,gCACE,cAAChC,EAAD,IACA,cAAC2B,EAAD,OCANM,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAaC,QAAS,KAAMtC,UAAWA,EAAvC,SACE,cAAC,IAAD,CAAUR,MAAOA,EAAjB,SACE,cAAC,EAAD,UAIN+C,SAASC,eAAe,U,kBCf1B5E,EAAOC,QAAU,CAAC,MAAQ,2BAA2B,YAAc,iCAAiC,UAAY,+BAA+B,aAAe,kCAAkC,OAAS,+B","file":"static/js/main.25bdd308.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"listItems\":\"CommentsList_listItems__2g2cJ\",\"item\":\"CommentsList_item__cKCEw\"};","import { createAction } from '@reduxjs/toolkit';\nimport { v4 as uuidv4 } from 'uuid';\n\nconst addComment = createAction('comments/add', (name, text) => ({\n  payload: {\n    name,\n    text,\n    id: uuidv4(),\n  },\n}));\n\nexport default { addComment };\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\nimport commentsActions from './comments-actions';\n\nconst items = createReducer([], {\n  [commentsActions.addComment]: (state, { payload }) => [...state, payload],\n});\n\nexport default combineReducers({\n  items\n});\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport logger from 'redux-logger';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport commentsReducer from './comments/comments-reducers';\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n};\n\nexport const store = configureStore({\n  reducer: {\n    comments: persistReducer(persistConfig, commentsReducer),\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nexport const persistor = persistStore(store);\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport commentsActions from '../../redux/comments/comments-actions';\nimport s from './CommentForm.module.css';\n\nexport default function CommentForm() {\n  const [name, setName] = useState('');\n  const [text, setText] = useState('');\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'comment':\n        setText(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    return dispatch(commentsActions.addComment(name, text), resetForm());\n  };\n\n  const resetForm = () => {\n    setName('');\n    setText('');\n  };\n\n  return (\n    <div>\n      <form className={s.commentForm} onSubmit={handleSubmit}>\n        <label htmlFor=\"new-name\">Name</label>\n        <input\n          type=\"text\"\n          name=\"name\"\n          id=\"new-name\"\n          placeholder=\"Enter name\"\n          className={s.inputName}\n          onChange={handleChange}\n          value={name}\n          required\n        />\n        <label htmlFor=\"new-comment\">Comment</label>\n        <textarea\n          type=\"text\"\n          name=\"comment\"\n          id=\"new-comment\"\n          placeholder=\"Enter your comment\"\n          className={s.inputComment}\n          onChange={handleChange}\n          value={text}\n          required\n        />\n        <button className={s.btnAdd} type=\"submit\">\n          Add comment\n        </button>\n      </form>\n      <h2 className={s.title}>Comments list</h2>\n    </div>\n  );\n}\n","export const getComments = state => state.comments.items;\n\nexport const getVisibleComments = state => {\n  const allComments = getComments(state);\n  return allComments;\n};\n","import { useSelector } from 'react-redux';\nimport { getVisibleComments } from '../../redux/comments/comments-selectors';\nimport s from './CommentsList.module.css';\n\nexport default function CommentList() {\n  const comments = useSelector(getVisibleComments);\n\n  return (\n    <ul className={s.listItems}>\n      {comments.map(({ id, name, text }) => (\n        <li key={id} className={s.item}>\n          {name}: {text}\n        </li>\n      ))}\n    </ul>\n  );\n}\n","import CommentForm from './Components/CommentForm/CommentForm';\nimport './App.css';\nimport CommentList from './Components/CommentsList/CommentList';\n\nexport default function App() {\n  return (\n    <div>\n      <CommentForm />\n      <CommentList />\n    </div>\n  );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store, persistor } from './redux/store';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <PersistGate loading={null} persistor={persistor}>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </PersistGate>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"CommentForm_title__2TGgt\",\"commentForm\":\"CommentForm_commentForm__3G5Qg\",\"inputName\":\"CommentForm_inputName__3ANQv\",\"inputComment\":\"CommentForm_inputComment__39xPg\",\"btnAdd\":\"CommentForm_btnAdd__2u7LV\"};"],"sourceRoot":""}